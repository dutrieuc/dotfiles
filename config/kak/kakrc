# Plugins
evaluate-commands %sh{
    kcr init kakoune
}
evaluate-commands %sh{
    kak-lsp --kakoune -s $kak_session
}
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload


# --- Options
# Theme
colorscheme dracula
plug "andreyorst/powerline.kak" defer powerline_dracula %{
    powerline-separator global none
    powerline-theme dracula
    powerline-format global 'lsp git bufname line_column mode_info client session position'
} config %{
    powerline-start
}
# Eslint JS
plug "schemar/kak-jsts" config %{
    hook global WinSetOption filetype=(javascript|typescript) %{
        alias window jsformat format-eslint
    }
}

# CSV
plug "gspia/csv.kak" %{
    set-option global csv_sep ','
}

plug "alexherbo2/show-characters.kak" %{
    show-characters
}

# Clippy
set global ui_options terminal_assistant=none

# LSP
lsp-enable
set global lsp_completion_trigger "execute-keys 'h<a-h><a-k>\S[^\h\n,=;*(){}\[\]]\z<ret>'"
lsp-auto-hover-enable
set-option global lsp_hover_anchor true


hook global InsertChar \t %{ exec -draft -itersel h@ }
set global tabstop 4
set global indentwidth 4

# Auto-pair
plug "alexherbo2/auto-pairs.kak" %{
    set-option global auto_pairs ( ) { } [ ] '"' '"' "'" "'" ` ` “ ” ‘ ’ « » ‹ ›
    enable-auto-pairs
}

# --- Commands
 
# fzf

define-command -override fzf-files %{
  connect popup sh -c %{
    fzf --preview 'cat {}' | xargs kcr edit --
  }
}

define-command -override fzf-buffers %{
  connect popup sh -c %{
    kcr get --raw --value buflist | fzf --preview 'kcr cat --raw {}' | xargs kcr send buffer --
  }
}

# Windowing
plug "alexherbo2/alacritty.kak" %{
    alacritty-integration-enable
}

# --- Mapping 

# - Normal mode 

# Reloading
map -docstring 'reload kakrc' global normal <F5> ':source-kakrc; echo reloaded kakrc<ret>'


map -docstring 'client' global normal <c-t> ':new<ret>'
map -docstring 'terminal' global normal <c-n> ':connect-terminal<ret>'
# map -docstring 'file explorer' global normal <c-e> ':connect panel sidetree --select %val{buffile}<ret>'
map -docstring 'file picker' global normal <c-f> ':connect popup kcr fzf files<ret>'
map -docstring 'buffer picker' global normal <c-b> ':connect popup kcr fzf buffers<ret>'
map -docstring 'grep picker' global normal <c-g> ':connect popup kcr fzf grep<ret>'
map -docstring 'grep picker (buffer)' global normal <c-r> ':connect popup kcr fzf grep %val{buflist}<ret>'
map -docstring 'git' global normal <c-l> ':connect popup lazygit &<ret>'
# - User mode 

# i3
plug 'delapouite/kakoune-i3' %{
      # Suggested mapping
  map global user 3 ': enter-user-mode i3<ret>' -docstring 'i3 mode'
}


plug 'delapouite/kakoune-buffers' %{
    map global normal ^ q
    map global normal <a-^> Q
    map global normal q b
    map global normal Q B
    map global normal <a-q> <a-b>
    map global normal <a-Q> <a-B>
    map global normal b ': enter-buffers-mode<ret>' -docstring 'buffers'
    map global normal B ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)'
}


# System clipboard
hook global RegisterModified '"' %{ nop %sh{
  printf %s "$kak_main_reg_dquote" | xsel --input --clipboard  -docstring 'copy before'
}}
# ,p paste from sys clipboard
map global user y '<a-|>xsel -i -b<ret>' -docstring 'copy to sys clipboard'
map global user P '!xsel --output --clipboard<ret>' -docstring 'paste'
map global user p '<a-!>xsel --output --clipboard<ret>' -docstring 'paste before'

hook global RegisterModified '"' %{ nop %sh{
  printf %s "$kak_main_reg_dquote" | wl-copy > /dev/null 2>&1 &
}}

declare-user-mode odoo
map global user o ': enter-user-mode odoo<ret>' -docstring 'enter odoo mode'
define-command oscout-popup %{
  connect popup sh -c %{
    cd ~/source-odoo/;
    oscout
  }
}
map global odoo o ': oscout-popup<ret>' -docstring 'search'
