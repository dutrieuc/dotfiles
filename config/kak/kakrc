# --- Plugins
evaluate-commands %sh{
    kcr init kakoune
}
evaluate-commands %sh{
    kak-lsp --kakoune -s $kak_session
}
# Plug
source "%val{config}/plugins/plug.kak/rc/plug.kak"
plug "andreyorst/plug.kak" noload
# Extra-filtetype, including git messages, support
plug "kakoune-editor/kakoune-extra-filetypes"
# Snippets
#plug "andreyorst/kakoune-snippet-collection"
#plug "occivink/kakoune-snippets" config %{
#    set-option -add global snippets_directories "%opt{plug_install_dir}/kakoune-snippet-collection/snippets"
#    set-option -add global snippets_directories "%opt{plug_install_dir}/odoo-kakoune-snippets/snippets"
#    set-option current snippets_auto_expand false
#}
# Auto-pair
#plug "alexherbo2/auto-pairs.kak" %{
#    set-option global auto_pairs ( ) { } [ ] '"' '"' "'" "'" ` ` “ ” ‘ ’ « » ‹ ›
#    enable-auto-pairs
#}
# CSV
plug "gspia/csv.kak" %{
    set-option global csv_sep ','
}
# Foot
plug "kkga/foot.kak"

# --- Options
# Theme
colorscheme dracula

# plug "alexherbo2/show-characters.kak" %{
#     show-characters
# }

set-option global grepcmd 'rg -Hn --no-heading'
set-option global ui_options terminal_assistant=none

# LSP
lsp-enable
#lsp-auto-hover-enable
#set-option global lsp_completion_trigger "execute-keys 'h<a-h><a-k>\S[^\h\n,=;*(){}\[\]]\z<ret>'"
set-option global lsp_hover_anchor true
set-option global lsp_auto_show_code_actions true
# set-option global lsp_show_hover_format %{
#     if [ -n "${lsp_diagnostics}" ]; then
#         printf "{+b@InfoDefault}Diagnostics:{InfoDefault}\n%s" "${lsp_diagnostics}"
#     fi
# }

# Autoreload buffer on modification 
set-option global autoreload yes

set-option global indentwidth 0
set-option global tabstop 4
# --- Hooks
# python tab to space
hook global WinSetOption filetype=(rust|python|zig|ruby|xml|js) %{
    set-option buffer indentwidth 4
    hook buffer InsertChar \t %{ exec -draft -itersel h@ }
}
hook global WinSetOption filetype=python %{
    set-option window formatcmd 'black -l 120 -q  -'
}
hook global WinSetOption filetype=markdown %{
    set window formatcmd 'prettier --parser markdown --print-width 72 --prose-wrap always'
}

# copy to system clipboard
hook global RegisterModified '"' %{ nop %sh{
  printf %s "$kak_main_reg_dquote" | wl-copy > /dev/null 2>&1 &
}}
# Autowrap for text
hook global WinSetOption filetype=(plain|text|markdown|rst|ms|org|git-commit) %{
    set window autowrap_column 72
    autowrap-enable
    map buffer normal = "|fmt -w $kak_opt_autowrap_column<ret>"
}

# --- Commands
 
# FZF
define-command -override fzf-files %{
  connect terminal-popup sh -c %{
    fzf --preview 'cat {}' | xargs kcr edit --
  }
}
define-command -override fzf-buffers %{
  connect terminal-popup sh -c %{
    kcr get --raw --value buflist | fzf --preview 'kcr cat --raw {}' | xargs kcr send buffer --
  }
}

# Odoo
define-command oscout-popup %{
  connect terminal-panel sh -c %{
    cd ~/source-odoo/;
    oscout
  }
}
define-command odoo-update-popup %{
  connect terminal-panel sh -c %{
    update_odoodb
    read a
  }
}

# Note
define-command zk-edit-tag -params 1 %{
  connect terminal zk edit --interactive --tag %arg{1}
}
define-command zk-md-link %{
	my-surround
	execute-keys '[a()<esc>h,p'
}
define-command zk-cycle-todo %{
    try %{
        execute-keys 'xs #todo <ret>'
        execute-keys 'c #done <esc>'
    } catch %{
        execute-keys 's #done <ret>'
        execute-keys 'c #todo <esc>'
    }
}
define-command zk-xdg-open %{
	execute-keys '<a-i>('
	nop %sh{
		xdg-open $kak_main_reg_dot
	}
}

# Surround
define-command -override my-surround -docstring %{
	Surround all selections with the typed character. 
} %{
	on-key %{
		evaluate-commands %sh{
			left=$kak_key
			right=$kak_key
			pair() {
				( [ "$kak_key" = "$1" ] || [ "$kak_key" = "$2" ] ) && left=$1 && right=$2
			}
			pair '(' ')' || pair '[' ']' || pair '{' '}' || pair '<lt>' '<gt>'
			printf "execute-keys %%{i%s<esc>a%s<esc>}" "$left" "$right"
		}
	}
}

# --- Mapping 

# - Normal mode 
map -docstring 'client' global normal <c-t> ':new<ret>'
map -docstring 'terminal' global normal <c-n> ':connect-terminal<ret>'
# map -docstring 'file explorer' global normal <c-e> ':connect panel sidetree --select %val{buffile}<ret>'
map -docstring 'file picker' global normal <c-f> ':connect terminal-popup kcr fzf files<ret>'
map -docstring 'buffer picker' global normal <c-b> ':connect terminal-popup kcr fzf buffers<ret>'
map -docstring 'grep picker' global normal <c-g> ':connect terminal-popup kcr fzf grep<ret>'
map -docstring 'grep picker (buffer)' global normal <c-r> ':connect terminal-popup kcr fzf grep %val{buflist}<ret>'
map -docstring 'git' global normal <c-l> ':connect terminal-popup lazygit &<ret>'

plug "https://gitlab.com/Screwtapello/kakoune-inc-dec" %{
    map global normal <c-a> ':inc-dec-modify-numbers + 1<ret>'
    map global normal <c-x> ':inc-dec-modify-numbers - 1<ret>'
}

plug 'delapouite/kakoune-buffers' %{
    map global normal ^ q
    map global normal <a-^> Q
    map global normal q b
    map global normal Q B
    map global normal <a-q> <a-b>
    map global normal <a-Q> <a-B>
    map global normal b ': enter-buffers-mode<ret>' -docstring 'buffers'
    map global normal B ': enter-user-mode -lock buffers<ret>' -docstring 'buffers (lock)'
}

# - User mode 
map global user l %{: enter-user-mode lsp<ret>} -docstring "LSP mode"
map global user s ': snippets ' -docstring 'snippet menu'
map global user e ': snippets-expand-trigger<ret>' -docstring 'snippet expand'
map global user u %{: my-surround<ret>} -docstring 'surround'
map global user o ': enter-user-mode odoo<ret>' -docstring 'enter odoo mode'
map global user n ': enter-user-mode note<ret>' -docstring 'enter note mode'

# System clipboard
map global user P '!wl-paste --no-newline<ret>' -docstring 'paste'
map global user p '<a-!>wl-paste --no-newline<ret>' -docstring 'paste before'

# - Odoo mode
declare-user-mode odoo
map global odoo o ': oscout-popup<ret>' -docstring 'search'
map global odoo m ': odoo-update-popup<ret>' -docstring 'make'
map global odoo s ': snippets odoo_' -docstring 'snippet odoo menu'

# - ZK note mode
declare-user-mode note
map global note j ': connect terminal zk daily<ret>' -docstring 'open today journal'
map global note e ': connect terminal zk edit --interactive<ret>' -docstring 'edit or create a note'
map global note t ': zk-edit-tag ' -docstring 'list/edit note with {tag}'
map global note T ': zk-edit-tag todo<ret>' -docstring 'list/edit note with #todo'
map global note l ': zk-md-link<ret>' -docstring 'insert md link around selection from sys clipboard'
map global note d ': zk-cycle-todo<ret>' -docstring 'cycle todo/done'
map global note o ': zk-xdg-open<ret>' -docstring 'open link with xdg'
map global note b ': zk-backlinks<ret>' -docstring 'todo list/edit backlinks to this note (lsp find reference)'
map global note i ': zk-index<ret>' -docstring 'todo index this notebook'
